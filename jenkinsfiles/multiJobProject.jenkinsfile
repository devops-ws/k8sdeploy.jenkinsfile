#!groovy
@Library("jenkinslibrary") _    //jenkins: Manage Jenkins -> configure system -> Global Pipeline Libraries -> Library Name

def tasks = [:]
projectType = "otherProject"
def tools = new org.devops.tools()
//pipeline
pipeline{
	
    agent any
    options {
	    timestamps() //日志会有时间
	    skipDefaultCheckout() //删除隐式checkout scm语句
	    disableConcurrentBuilds() //禁止并行
	    timeout(time: 1, unit: "HOURS") //流水线超时设置1h
	    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '2', numToKeepStr: '2'))
	}
	
    stages{
    	stage("init"){
    		steps{
    		    script{
			def serviceEnvConfig = libraryResource "com/${projectType}/${releaseEnv}/conf/multiJobProject.groovy"
			writeFile encoding: 'UTF-8', file: 'service.groovy', text: serviceEnvConfig
			load 'service.groovy'
			def pythonScript = libraryResource "com/extension/python/parserxlsx.py"
			writeFile encoding: 'UTF-8', file: 'parserxlsx.py', text: pythonScript
    		    }
    		}	
    	}
    	stage("svn"){
    		steps{
    		    script{
			checkout([$class: 'SubversionSCM', additionalCredentials: [], excludedCommitMessages: '', 
					excludedRegions: '', excludedRevprop: '', excludedUsers: '', filterChangelog: false, 
					ignoreDirPropChanges: false, includedRegions: '', 
					locations: [[cancelProcessOnExternalsFail: true, 
					credentialsId: svnCredentialsId , 
					depthOption: 'files', ignoreExternalsOption: true, local: "online", 
					remote: svnPath ]], 
					quietOperation: true, workspaceUpdater: [$class: 'UpdateUpdater']])
    		    }
    		}	
    	}
    	stage("exec python"){
    		steps{
    		    script{
			sh "python3 parserxlsx.py ${filePath}"
			props = readJSON file: 'online.json'
    		    }
    		}	
    	}
    	stage("first build projects"){
    		steps{
    		    script{
			props.first.each{ def name ->		
				def result = build job: name, propagate: false, parameters: [string(name: 'Status', value: 'update')]
				if (result.currentResult == "SUCCESS"){
				      tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","blue")
				      tools.PrintMes("${result.projectName} is ${result.currentResult}","blue")
				}else{
					  tools.PrintMes("project ${result.projectName} is ${result.currentResult}","red")
				      tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","red")
				      error ""
				}
			}
    		    }
    		}	
    	}
    	stage("parallel build projects"){
    		steps{
    		    script{
			props.parallels.each{ def name ->
				tasks[ "task ${name}" ] = {
				 stage("task ${name}"){
						def result = build job: name, propagate: false, parameters: [string(name: 'Status', value: 'update')]
						if (result.currentResult == "SUCCESS"){
					tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","blue")
					tools.PrintMes("${result.projectName} is ${result.currentResult}","blue")
					}else{
					tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","red")
					tools.PrintMes( "project ${result.projectName} is ${result.currentResult}","red")
					}
				 }
			     }
			}
			parallel(tasks)
    		    }
    		}	
    	}
    	stage("last build projects"){
		steps{
		    script{
			props.last.each{ def name ->
			    def result = build job: name, propagate: false, parameters: [string(name: 'Status', value: 'update')]
			    if (result.currentResult == "SUCCESS"){
				  tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","blue")
				  tools.PrintMes("${result.projectName} is ${result.currentResult}","blue")
			    }else{
				  tools.PrintMes("project ${result.projectName} is ${result.currentResult}","red")
				  tools.PrintMes("${result.projectName} url is ${result.absoluteUrl}","red")
				  error ""
			    }
			}
		    }
		}
    	}
    }
}
